# Project Transfer Guide

This guide will help you transfer the Heart Disease Prediction System to a new laptop.

## Prerequisites

Before transferring, ensure you have:
- Python 3.8 or higher installed on the new laptop
- Git installed (optional, for version control)
- Sufficient disk space (approximately 500MB)

## Transfer Methods

### Method 1: Using a USB Drive or External Storage

1. **Prepare the project for transfer**:
   - Ensure all files are saved
   - Close any running servers or processes
   - Create a zip file of the entire project directory

2. **Transfer the files**:
   - Copy the zip file to your external storage device
   - Transfer the file to your new laptop
   - Extract the zip file to your desired location

### Method 2: Using Git (Recommended)

1. **Initialize a Git repository** (if not already done):
   ```bash
   git init
   git add .
   git commit -m "Initial commit"
   ```

2. **Create a remote repository** on GitHub, GitLab, or Bitbucket

3. **Push your code to the remote repository**:
   ```bash
   git remote add origin <repository-url>
   git push -u origin master
   ```

4. **Clone the repository on your new laptop**:
   ```bash
   git clone <repository-url>
   cd myproject
   ```

## Setup on New Laptop

1. **Create a virtual environment**:
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

2. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Train the machine learning model**:
   ```bash
   python ml_model/train.py
   ```

4. **Apply database migrations**:
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

5. **Create a superuser**:
   ```bash
   python manage.py createsuperuser
   ```

6. **Run the development server**:
   ```bash
   python manage.py runserver
   ```

## Important Files to Transfer

Ensure these files are included in your transfer:
- All Python files (*.py)
- HTML templates
- Static files (CSS, JS, images)
- requirements.txt
- README.md
- ml_model_documentation.txt
- Database file (if using SQLite)
- Trained model files in ml_model/models/

## Database Considerations

### If using SQLite:
- The database file (db.sqlite3) should be transferred with the project
- Ensure file permissions are set correctly on the new system

### If using PostgreSQL or MySQL:
- Export the database schema and data
- Recreate the database on the new system
- Import the exported data

## Environment Variables

If your project uses environment variables:
1. Create a .env file on the new laptop
2. Copy the contents from your old .env file
3. Update any paths or settings specific to the new system

## Troubleshooting

### Common Issues:

1. **Missing dependencies**:
   - Ensure requirements.txt is complete
   - Run `pip install -r requirements.txt` again

2. **Database errors**:
   - Check database settings in settings.py
   - Ensure migrations are applied correctly

3. **Model loading errors**:
   - Verify the model file is transferred correctly
   - Retrain the model if necessary

4. **Static files not loading**:
   - Run `python manage.py collectstatic`
   - Check STATIC_ROOT and STATIC_URL settings

5. **Template errors**:
   - Verify all template files are transferred
   - Check template directory settings

## Post-Transfer Verification

After setting up on the new laptop, verify:

1. The application runs without errors
2. User authentication works
3. Heart disease predictions function correctly
4. All templates render properly
5. Static files are loaded
6. Database operations work as expected

## Additional Resources

- Django documentation: https://docs.djangoproject.com/
- scikit-learn documentation: https://scikit-learn.org/stable/documentation.html
- Project README.md for specific setup instructions
- ml_model_documentation.txt for model details 